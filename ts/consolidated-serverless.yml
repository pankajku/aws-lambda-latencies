service:
  name: pankajk-awslt-consolidated

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack

custom:
  vpc:
    securityGroupIds:
      - ${ssm:/${env:AWSLT_BASE}/securityGroupId1}
      - ${ssm:/${env:AWSLT_BASE}/securityGroupId2}
    subnetIds:
      - ${ssm:/${env:AWSLT_BASE}/subnetId1}
      - ${ssm:/${env:AWSLT_BASE}/subnetId2}
  dbparams:
    host: ${ssm:/${env:AWSLT_BASE}/hostname}
    user: ${ssm:/${env:AWSLT_BASE}/username}
    password: ${ssm:/${env:AWSLT_BASE}/password~true}
    database: ${ssm:/${env:AWSLT_BASE}/dbschema}
  memcachedEndPoint: ${ssm:/${env:AWSLT_BASE}/memcached-ep}
  streamName: ${ssm:/${env:AWSLT_BASE}/kinesis-streamname}
  shardId: ${ssm:/${env:AWSLT_BASE}/kinesis-shardid}

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - kinesis:*
      Resource: "*"

functions:
  echo:
    handler: src/lambdas.echo
    events:
      - http:
          method: get
          path: echo

  vpcEcho:
    handler: src/lambdas.echo
    vpc: ${self:custom.vpc}
    events:
      - http:
          method: get
          path: vpc-echo

  proxyEcho:
    handler: src/lambdas.proxyEcho
    events:
      - http:
          method: get
          path: proxy-echo

  heavyEcho:
    handler: src/lambdas.heavyEcho
    events:
      - http:
          method: get
          path: heavy-echo

  sleep:
    handler: src/lambdas.sleep
    events:
      - http:
          method: get
          path: sleep

  rdsGet:
    handler: src/lambdas.rdsGet
    environment: ${self:custom.dbparams}
    vpc: ${self:custom.vpc}
    events:
      - http:
          method: get
          path: rds-get/{key}

  rdsGet2:
    handler: src/lambdas.rdsGet2
    environment: ${self:custom.dbparams}
    vpc: ${self:custom.vpc}
    events:
      - http:
          method: get
          path: rds-get2/{key}

  rdsPut:
    handler: src/lambdas.rdsPut
    environment: ${self:custom.dbparams}
    vpc: ${self:custom.vpc}
    events:
      - http:
          method: put
          path: rds-put/{key}

  typeormGet:
    handler: src/lambdas.typeormGet
    environment: ${self:custom.dbparams}
    vpc: ${self:custom.vpc}
    events:
      - http:
          method: get
          path: typeorm-get/{key}

  typeormGet2:
    handler: src/lambdas.typeormGet2
    environment: ${self:custom.dbparams}
    vpc: ${self:custom.vpc}
    events:
      - http:
          method: get
          path: typeorm-get2/{key}

  typeormPut:
    handler: src/lambdas.typeormPut
    environment: ${self:custom.dbparams}
    vpc: ${self:custom.vpc}
    events:
      - http:
          method: put
          path: typeorm-put/{key}

  memcachedGet:
    handler: src/lambdas.memcachedGet
    environment:
      memcachedEndPoint: ${self:custom.memcachedEndPoint}
    vpc: ${self:custom.vpc}
    events:
      - http:
          method: get
          path: memcached-get/{key}

  memcachedPut:
    handler: src/lambdas.memcachedPut
    environment:
      memcachedEndPoint: ${self:custom.memcachedEndPoint}
    vpc: ${self:custom.vpc}
    events:
      - http:
          method: put
          path: memcached-put/{key}

  kinesisGet:
    handler: src/lambdas.kinesisGet
    environment:
      streamName: ${self:custom.streamName}
      shardId: ${self:custom.shardId}
    events:
      - http:
          method: get
          path: kinesis-get

  kinesisPut:
    handler: src/lambdas.kinesisPut
    environment:
      streamName: ${self:custom.streamName}
    events:
      - http:
          method: put
          path: kinesis-put/{key}